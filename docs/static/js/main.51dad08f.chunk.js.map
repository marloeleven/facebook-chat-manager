{"version":3,"sources":["const/config.ts","api/fb.ts","slices/app.ts","observables/messages.ts","epics/app.ts","app/store.ts","containers/errorboundary.tsx","containers/loader.tsx","hooks/useEffectOnce.ts","containers/login.tsx","containers/page.tsx","containers/video.tsx","containers/message.tsx","app/routes.tsx","App.tsx","index.tsx"],"names":["fb","appId","version","messenger","page_id","color","BASE_URL","generateURL","paramsObj","baseURL","CONFIG","join","params","URLSearchParams","toString","userId","access_token","Promise","resolve","reject","a","cache","lscache","get","isEmpty","id","list","fetch","then","r","json","catch","data","set","pageId","appSlice","createSlice","name","initialState","loggedIn","accessToken","pages","pageAccessToken","liveVideos","liveVideoId","reducers","setLoginState","state","payload","Boolean","Object","assign","setPages","setPageId","pageInfo","find","page","setLiveVideos","setLiveVideoId","actions","app","fieldsArray","messages$","Subject","connect$","connected$","BehaviorSubject","onMessages$","pipe","map","message","distinctUntilChanged","prev","next","value","switchMap","defer","url","fields","urlMain","generateUrl","es","EventSource","onopen","onerror","retryWhen","err","delay","subscribe","addEventListener","JSON","parse","history","combineEpics","action$","state$","ofType","appActions","fbApi","length","of","empty","push","stringify","tap","ignoreElements","rootEpic","appEpic","createBrowserHistory","rootReducer","combineReducers","router","connectRouter","appReducer","epicMiddleware","createEpicMiddleware","store","configureStore","middleware","getDefaultMiddleware","routerMiddleware","reducer","run","ErrorBoundary","hasError","error","errorInfo","this","props","children","console","log","Component","className","CircularProgress","Typography","variant","callback","useEffect","_window","window","Page","onClick","Button","Video","title","status","useStyles","makeStyles","theme","root","display","width","maxWidth","backgroundColor","palette","background","paper","inline","Message","from","created_time","ListItem","alignItems","ListItemText","primary","secondary","component","Divider","routes","path","useState","setConnected","messages","setMessages","filter","setFilter","classes","onChange","useCallback","event","target","useEffectOnce","slice","bool","TextField","label","List","includes","key","dispatch","useDispatch","videos","useSelector","selectPage","videoId","video","exact","checkLoginStatus","authResponse","userID","onClickLogin","FB","login","init","autoLogAppEvents","xfbml","getLoginStatus","route","flexDirection","padding","paddingTop","AppContext","React","createContext","App","Provider","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.51dad08f.chunk.js","sourcesContent":["export default {\r\n  fb: {\r\n    appId: '563571747166109',\r\n    version: 'v7.0',\r\n    messenger: {\r\n      page_id: '402815903188264',\r\n      color: '#e68585',\r\n    },\r\n    BASE_URL: 'https://graph.facebook.com',\r\n  },\r\n};\r\n","import CONFIG from 'const/config';\r\nimport lscache from 'lscache';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { IPage, IVideo } from 'types';\r\n\r\ninterface IURLParams {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface ICacheList {\r\n  id: string;\r\n  list: [];\r\n}\r\n\r\nconst generateURL = (paramsObj: IURLParams) => {\r\n  const baseURL = [CONFIG.fb.BASE_URL, CONFIG.fb.version].join('/');\r\n\r\n  const params = new URLSearchParams(paramsObj).toString();\r\n\r\n  return { baseURL, params };\r\n};\r\n\r\nconst VIDEOS = 'videos';\r\nexport const getLiveVideos = (\r\n  pageId: string,\r\n  access_token: string\r\n): Promise<IVideo[]> => {\r\n  const { baseURL, params } = generateURL({ access_token });\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    const cache: ICacheList = lscache.get(VIDEOS);\r\n\r\n    if (!isEmpty(cache) && cache && cache.id === pageId) {\r\n      resolve(cache.list);\r\n      return;\r\n    }\r\n\r\n    const { data } = await fetch(\r\n      `${baseURL}/${pageId}/live_videos?status=id,name,status&${params}&filtering=[{ field: 'status', operator: 'EQUAL', value: 'LIVE' }]&limit=10`\r\n    )\r\n      .then((r) => r.json())\r\n      .catch(reject);\r\n\r\n    // lscache.set(VIDEOS, {\r\n    //   id: pageId,\r\n    //   list: data,\r\n    // });\r\n\r\n    resolve(data);\r\n  });\r\n};\r\n\r\nconst PAGES = 'pages';\r\nexport const getPages = (\r\n  userId: string,\r\n  access_token: string\r\n): Promise<IPage[]> => {\r\n  const { baseURL, params } = generateURL({ access_token });\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    const cache: ICacheList = lscache.get(PAGES);\r\n\r\n    if (!isEmpty(cache) && cache && cache.id === userId) {\r\n      resolve(cache.list);\r\n      return;\r\n    }\r\n\r\n    const { data } = await fetch(\r\n      `${baseURL}/me/accounts?fields=id,name,access_token&${params}`\r\n    )\r\n      .then((r) => r.json())\r\n      .catch(reject);\r\n\r\n    lscache.set(PAGES, data);\r\n\r\n    resolve(data);\r\n  });\r\n};\r\n\r\nexport default {\r\n  getPages,\r\n  getLiveVideos,\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'app/store';\r\n\r\nimport { IPage, IVideo } from 'types';\r\n\r\ninterface AppState {\r\n  loggedIn: boolean;\r\n  accessToken: string;\r\n  userId: string;\r\n  pages: IPage[];\r\n  pageId: string;\r\n  pageAccessToken: string;\r\n  liveVideos: IVideo[];\r\n  liveVideoId: string;\r\n}\r\n\r\nconst initialState: AppState = {\r\n  loggedIn: false,\r\n  accessToken: '',\r\n  userId: '',\r\n  pages: [],\r\n  pageId: '',\r\n  pageAccessToken: '',\r\n  liveVideos: [],\r\n  liveVideoId: '',\r\n};\r\n\r\ninterface ISetLoginData {\r\n  accessToken: string;\r\n  userId: string;\r\n}\r\n\r\nconst defaultTimeline = (access_token: string): IPage => ({\r\n  id: 'me',\r\n  name: 'Default Timeline',\r\n  access_token:\r\n    'EAAIP03TKZBtEBAF1xmOaEoeoF6gQ2bNYsVOrZCjFoYcf0S2ZAKNVW3p3ZBsD5ZCjUZCpAmwV7FqfZC0yeAUzE4ftM9x2qON5oZCAr4ptGyvfWHn0zohnEPZBBSXsMmIO6bf6I0SDxpZCRbzIFHmN0Lfd0N1HpfUZAEuwsPypnRW9NEvC9cZAgBTsVlPJoSnX1MJHjXUZD',\r\n});\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    setLoginState: (\r\n      state,\r\n      { payload: { accessToken, userId } }: PayloadAction<ISetLoginData>\r\n    ) => {\r\n      const loggedIn = Boolean(accessToken && userId);\r\n\r\n      Object.assign(state, {\r\n        accessToken,\r\n        userId,\r\n        loggedIn,\r\n      });\r\n    },\r\n    setPages: (state, { payload: pages }: PayloadAction<IPage[]>) => {\r\n      state.pages = [defaultTimeline(state.accessToken), ...pages];\r\n    },\r\n    setPageId: (state, { payload: pageId }: PayloadAction<string>) => {\r\n      const pageInfo = state.pages.find((page) => page.id === pageId);\r\n\r\n      if (pageInfo) {\r\n        state.pageId = pageId;\r\n        state.pageAccessToken = pageInfo.access_token;\r\n      }\r\n    },\r\n    setLiveVideos: (\r\n      state,\r\n      { payload: liveVideos }: PayloadAction<IVideo[]>\r\n    ) => {\r\n      state.liveVideos = liveVideos;\r\n    },\r\n    setLiveVideoId: (\r\n      state,\r\n      { payload: liveVideoId }: PayloadAction<string>\r\n    ) => {\r\n      state.liveVideoId = liveVideoId;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setLoginState,\r\n  setPages,\r\n  setPageId,\r\n  setLiveVideos,\r\n  setLiveVideoId,\r\n} = appSlice.actions;\r\n\r\nexport const get = {\r\n  loggedIn: (state: RootState) => state.app.loggedIn,\r\n  pages: (state: RootState) => state.app.pages,\r\n  pageId: (state: RootState) => state.app.pageId,\r\n  pageAccessToken: (state: RootState) => state.app.pageAccessToken,\r\n  liveVideos: (state: RootState) => state.app.liveVideos,\r\n  liveVideoId: (state: RootState) => state.app.liveVideoId,\r\n};\r\n\r\nexport default appSlice.reducer;\r\n","import { Subject, BehaviorSubject, defer, empty, of } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  map,\r\n  switchMap,\r\n  retryWhen,\r\n  delay,\r\n  catchError,\r\n} from 'rxjs/operators';\r\n\r\nimport { IMessage } from 'types';\r\n\r\nconst fieldsArray = [\r\n  'id',\r\n  'attachment',\r\n  'created_time',\r\n  'from',\r\n  'message',\r\n  'message_tags',\r\n];\r\n\r\nconst commentRate = 'one_hundred_per_second';\r\n\r\nconst generateUrl = (liveVideoId: string, accessToken: string) => {\r\n  const fields = fieldsArray.join(',');\r\n\r\n  const urlMain = [\r\n    'https://streaming-graph.facebook.com',\r\n    liveVideoId,\r\n    'live_comments',\r\n  ].join('/');\r\n\r\n  const params = [\r\n    `access_token=${accessToken}`,\r\n    `comment_rate=${commentRate}`,\r\n    `fields=${fields}`,\r\n  ].join('&');\r\n\r\n  return `${urlMain}?${params}`;\r\n};\r\n\r\nexport interface IConnect {\r\n  liveVideoId: string;\r\n  accessToken: string;\r\n}\r\n\r\nconst messages$ = new Subject();\r\nexport const connect$ = new Subject();\r\nexport const connected$ = new BehaviorSubject(false);\r\n\r\nexport const onMessages$ = messages$.pipe(\r\n  map((message) => message as IMessage),\r\n  distinctUntilChanged((prev, next) => prev.id === next.id)\r\n);\r\n\r\nconnect$\r\n  .pipe(\r\n    map((value) => value as IConnect),\r\n    switchMap(({ liveVideoId, accessToken }) =>\r\n      defer(\r\n        () =>\r\n          new Promise((resolve, reject) => {\r\n            const url = generateUrl(liveVideoId, accessToken);\r\n\r\n            const es = new EventSource(url);\r\n\r\n            es.onopen = () => {\r\n              resolve(es);\r\n              connected$.next(true);\r\n            };\r\n\r\n            es.onerror = () => {\r\n              reject();\r\n            };\r\n          })\r\n      ).pipe(\r\n        retryWhen((err) => err.pipe(delay(3000))),\r\n        map((es) => es as EventSource)\r\n      )\r\n    )\r\n  )\r\n  .subscribe((es) => {\r\n    es.addEventListener('message', ({ data }) => {\r\n      const message = JSON.parse(data);\r\n\r\n      messages$.next(message);\r\n    });\r\n  });\r\n","import { Action } from '@reduxjs/toolkit';\r\nimport { RootState } from 'app/store';\r\nimport { push } from 'connected-react-router';\r\n\r\nimport { combineEpics, Epic, ofType } from 'redux-observable';\r\nimport { defer, of, empty, concat } from 'rxjs';\r\nimport {\r\n  switchMap,\r\n  tap,\r\n  filter,\r\n  ignoreElements,\r\n  map,\r\n  distinctUntilChanged,\r\n} from 'rxjs/operators';\r\n\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nimport fbApi from 'api/fb';\r\n\r\nimport * as appActions from 'slices/app';\r\n\r\nimport { connect$ } from 'observables/messages';\r\n\r\nconst setLoginEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setLoginState),\r\n    switchMap(() =>\r\n      defer(() => {\r\n        const { loggedIn, userId, accessToken } = state$.value.app;\r\n\r\n        if (loggedIn) {\r\n          return fbApi.getPages(userId, accessToken);\r\n        }\r\n\r\n        return [];\r\n      }).pipe(\r\n        switchMap((pages) => {\r\n          if (pages.length) {\r\n            return of(appActions.setPages(pages));\r\n          }\r\n\r\n          return empty();\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\nconst setPagesEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setPages),\r\n    switchMap(() => of(push('/pages')))\r\n  );\r\n\r\nconst setPageIdEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setPageId),\r\n    switchMap(() =>\r\n      defer(() => {\r\n        const { pageId, pageAccessToken: accessToken } = state$.value.app;\r\n\r\n        if (!isEmpty(pageId)) {\r\n          return fbApi.getLiveVideos(pageId, accessToken);\r\n        }\r\n\r\n        return [];\r\n      }).pipe(\r\n        switchMap((liveVideos) => {\r\n          return of(appActions.setLiveVideos(liveVideos));\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\nconst setLiveVideosEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setLiveVideos),\r\n    switchMap(() => of(push('/videos')))\r\n  );\r\n\r\nconst setLiveVideoIdEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setLiveVideoId),\r\n    switchMap(() => of(push('/messages')))\r\n  );\r\n\r\nconst stateChangeEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  state$.pipe(\r\n    map((state) => {\r\n      const {\r\n        app: { liveVideoId, pageAccessToken: accessToken },\r\n      } = state;\r\n      return JSON.stringify({\r\n        liveVideoId,\r\n        accessToken,\r\n      });\r\n    }),\r\n    distinctUntilChanged(),\r\n    tap(() => {\r\n      const {\r\n        app: { liveVideoId, pageAccessToken: accessToken },\r\n      } = state$.value;\r\n\r\n      if (liveVideoId && accessToken) {\r\n        connect$.next({ liveVideoId, accessToken });\r\n      }\r\n    }),\r\n    ignoreElements()\r\n  );\r\n\r\nexport default combineEpics(\r\n  setLoginEpic,\r\n  setPagesEpic,\r\n  setPageIdEpic,\r\n  setLiveVideosEpic,\r\n  setLiveVideoIdEpic,\r\n  stateChangeEpic\r\n);\r\n","import {\r\n  Action,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  ThunkAction,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport { createBrowserHistory, History } from 'history';\r\nimport { useDispatch } from 'react-redux';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\n\r\nimport appEpic from 'epics/app';\r\nimport appReducer from 'slices/app';\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n\r\nconst rootEpic = combineEpics(appEpic);\r\n\r\nconst createRootReducer = (history: History<any>) =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    app: appReducer,\r\n  });\r\n\r\nexport const history = createBrowserHistory();\r\nconst rootReducer = createRootReducer(history);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst epicMiddleware = createEpicMiddleware<Action, Action, RootState>();\r\n\r\nexport const store = configureStore({\r\n  middleware: [\r\n    ...getDefaultMiddleware(),\r\n    epicMiddleware,\r\n    routerMiddleware(history),\r\n  ],\r\n  reducer: rootReducer,\r\n});\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React, { Component } from 'react';\r\n\r\ninterface IState {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component {\r\n  state: IState = {\r\n    hasError: false,\r\n  };\r\n\r\n  static getDerivedStateFromError(error: Error) {\r\n    console.log(error);\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error: any, errorInfo: any) {\r\n    // You can also log the error to an error reporting service\r\n    // logErrorToMyService(error, errorInfo);\r\n    // console.error(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default () => (\r\n  <div className=\"absolute top-0 h-full w-full flex justify-center items-center bg-black bg-opacity-50 flex-col\">\r\n    <CircularProgress />\r\n    <Typography variant=\"button\" color=\"inherit\" className=\"pt-4\">\r\n      Loading...\r\n    </Typography>\r\n  </div>\r\n);\r\n","import { useEffect } from 'react';\r\n\r\nexport default (callback: React.EffectCallback) => useEffect(callback, []);\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport useEffectOnce from 'hooks/useEffectOnce';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport CONFIG from 'const/config';\r\n\r\nimport * as appActions from 'slices/app';\r\n\r\ninterface IFBData {\r\n  accessToken: string;\r\n  userID: string;\r\n}\r\n\r\ninterface IFBloginResult {\r\n  authResponse: IFBData;\r\n  status: string;\r\n}\r\n\r\nconst _window = window as any;\r\n\r\nexport default (props: any) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const checkLoginStatus = useCallback(\r\n    ({ authResponse, status }: IFBloginResult) => {\r\n      if (status === 'connected') {\r\n        const { accessToken, userID: userId } = authResponse;\r\n\r\n        dispatch(appActions.setLoginState({ accessToken, userId }));\r\n      }\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onClickLogin = useCallback(() => {\r\n    _window.FB.login(checkLoginStatus);\r\n  }, [checkLoginStatus]);\r\n\r\n  useEffectOnce(() => {\r\n    _window.FB.init({\r\n      appId: CONFIG.fb.appId,\r\n      autoLogAppEvents: true,\r\n      xfbml: true,\r\n      version: CONFIG.fb.version,\r\n    });\r\n\r\n    _window.FB.getLoginStatus(checkLoginStatus);\r\n  });\r\n\r\n  return (\r\n    <Button variant='contained' color='primary' onClick={onClickLogin}>\r\n      Login to Facebook\r\n    </Button>\r\n  );\r\n};\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport * as appActions from 'slices/app';\r\n\r\ninterface IButtonProps {\r\n  id: string;\r\n  name: string;\r\n  onClick: Function;\r\n}\r\n\r\nconst Page: React.FC<IButtonProps> = ({ id, name, onClick }) => (\r\n  <li>\r\n    <Button onClick={() => onClick(id)}>{name}</Button>\r\n  </li>\r\n);\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const pages = useSelector(appActions.get.pages);\r\n\r\n  const selectPage = useCallback(\r\n    (pageId: string) => dispatch(appActions.setPageId(pageId)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <ul>\r\n      {pages.map((page) => (\r\n        <Page key={page.id} {...page} onClick={selectPage} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport * as appActions from 'slices/app';\r\n\r\ninterface IButtonProps {\r\n  id: string;\r\n  title: string;\r\n  status: string;\r\n  onClick: Function;\r\n}\r\n\r\nconst Video: React.FC<IButtonProps> = ({ id, title, status, onClick }) => (\r\n  <li>\r\n    <Button onClick={() => onClick(id)}>\r\n      {status} :: {title}\r\n    </Button>\r\n  </li>\r\n);\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const videos = useSelector(appActions.get.liveVideos);\r\n\r\n  const selectPage = useCallback(\r\n    (videoId: string) => dispatch(appActions.setLiveVideoId(videoId)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <ul>\r\n      {videos.map((video) => (\r\n        <Video key={video.id} {...video} onClick={selectPage} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useCallback, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { onMessages$, connected$ } from 'observables/messages';\r\nimport { IMessage } from 'types';\r\nimport useEffectOnce from 'hooks/useEffectOnce';\r\nimport { DummyMessages } from 'data/messages';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'block',\r\n    width: '100%',\r\n    maxWidth: '36ch',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nconst Message: React.FC<IMessage> = ({ id, from, message, created_time }) => (\r\n  <>\r\n    <ListItem alignItems='flex-start'>\r\n      <ListItemText\r\n        primary={from.name}\r\n        secondary={\r\n          <>\r\n            <Typography\r\n              component='span'\r\n              variant='subtitle2'\r\n              className='inline'\r\n              color='textPrimary'\r\n            >\r\n              {message}\r\n            </Typography>\r\n          </>\r\n        }\r\n      />\r\n    </ListItem>\r\n    <Divider component='li' />\r\n  </>\r\n);\r\n\r\nexport default () => {\r\n  const [connected, setConnected] = useState<boolean>(false);\r\n  const [messages, setMessages] = useState<IMessage[]>([]);\r\n  const [filter, setFilter] = useState<string>('');\r\n\r\n  const classes = useStyles();\r\n\r\n  const onChange = useCallback((event) => {\r\n    setFilter(event.target.value);\r\n  }, []);\r\n\r\n  useEffectOnce(() => {\r\n    onMessages$.subscribe((message) => {\r\n      setMessages((messages) => {\r\n        return [...messages.slice(-200), message];\r\n      });\r\n    });\r\n\r\n    connected$.subscribe((bool) => setConnected(bool));\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <TextField\r\n        label='Filter Message'\r\n        variant='outlined'\r\n        value={filter}\r\n        onChange={onChange}\r\n      />\r\n      <List className={classes.root}>\r\n        {messages.map((message) => {\r\n          if (filter.length && !message.message.includes(filter)) {\r\n            return '';\r\n          }\r\n\r\n          return <Message key={message.id} {...message} />;\r\n        })}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport Login from 'containers/login';\r\nimport Page from 'containers/page';\r\nimport Video from 'containers/video';\r\nimport Message from 'containers/message';\r\n\r\ninterface IPage {\r\n  exact?: boolean;\r\n  path: string;\r\n  component: React.ComponentClass<any, any> | React.FunctionComponent<any>;\r\n}\r\n\r\nconst routes: IPage[] = [\r\n  {\r\n    path: '/messages',\r\n    component: Message,\r\n  },\r\n  {\r\n    path: '/videos',\r\n    component: Video,\r\n  },\r\n  {\r\n    path: '/pages',\r\n    component: Page,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/',\r\n    component: Login,\r\n  },\r\n];\r\n\r\nexport default () => (\r\n  <>\r\n    {routes.map((route) => (\r\n      <Route key={route.path} {...route} />\r\n    ))}\r\n  </>\r\n);\r\n","import React from 'react';\n\nimport Routes from 'app/routes';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: '5px',\n    paddingTop: '10px',\n  },\n}));\n\nexport type IEventCallbackVoid = (event: any) => void;\ninterface IAppContext {}\n\nexport const AppContext = React.createContext<IAppContext>({});\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppContext.Provider value={{}}>\n        <Routes />\n      </AppContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store, history } from 'app/store';\n\nimport ErrorBoundary from './containers/errorboundary';\nimport Loader from 'containers/loader';\n\nimport App from './App';\n\nimport './index.css';\nimport { ConnectedRouter } from 'connected-react-router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <BrowserRouter>\n        <Provider store={store}>\n          <ConnectedRouter history={history}>\n            <Suspense fallback={<Loader />}>\n              <App />\n            </Suspense>\n          </ConnectedRouter>\n        </Provider>\n      </BrowserRouter>\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}